<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on avances123</title>
    <link>http://blog.fabio.xyz/post/</link>
    <description>Recent content in Posts on avances123</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>es-es</language>
    <lastBuildDate>Sat, 31 Oct 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://blog.fabio.xyz/post/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Tablas hash en C,Javascript y Python</title>
      <link>http://blog.fabio.xyz/post/tablas%20hash%20en%20C,Javascript%20y%20Python/</link>
      <pubDate>Sat, 31 Oct 2015 00:00:00 +0000</pubDate>
      
      <guid>http://blog.fabio.xyz/post/tablas%20hash%20en%20C,Javascript%20y%20Python/</guid>
      <description>

&lt;p&gt;Un amigo necesitaba hacer una &lt;a href=&#34;http://es.wikipedia.org/wiki/Tabla_hash&#34;&gt;funcion hash&lt;/a&gt; para un problema concreto, como os podeis imaginar, el problema consistia en que necesitaba buscar en un diccionario muchisimas claves, este proceso necesitaba ser lo mas rapido posible, y segun nuestro cariño a distintos lenguajes ,entre varios decidimos hacer un estudio sobre como resolver el problema usando varios: C, javascript y python, sin usar ninguna cosa rara, simplemente usando lo que el lenguaje permita hacer.&lt;/p&gt;

&lt;h3 id=&#34;descripcion-del-problema:5dbeb49de3f8f0ff0c87f66e0ee68be5&#34;&gt;Descripcion del problema&lt;/h3&gt;

&lt;p&gt;Tenemos un fichero de texto con miles de lineas del tipo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-text&#34;&gt;x|y  |z |v  |w         |value
9|100|33|100|2014010100|1
9|100|33|100|2014010106|5
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nuestro objectivo es crear una tabla hash para poder buscar segun los campos de arriba, excepto el ultimo, que es el valor que queremos extraer. Es decir la clave de busqueda seran los valores &lt;em&gt;x,y,z,v,w&lt;/em&gt; y el valor el campo &lt;em&gt;value&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&#34;javascript:5dbeb49de3f8f0ff0c87f66e0ee68be5&#34;&gt;Javascript&lt;/h3&gt;

&lt;p&gt;En javascript un diccionario, es un &lt;a href=&#34;http://ecma262-5.com/ELS5_HTML.htm#Section_8.6&#34;&gt;objeto&lt;/a&gt;, es decir llenariamos un objeto cuyas propiedades son nuestras claves, no entiendo mucho la implementacion de los objetos/diccionarios en javascript asi que cualquier comentario clarificador lo agradeceria mucho.&lt;/p&gt;

&lt;p&gt;Creamos las claves concatenando los numeros como un string y le asignamos su valor.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;var csv = require(&amp;quot;fast-csv&amp;quot;),
    table = {};

csv.fromPath(&amp;quot;problema.txt&amp;quot;, { headers: true, delimiter: &#39;|&#39; })
 .on(&amp;quot;record&amp;quot;, function(data) {
    arr.push(data);
    table[data.x + data.y + data.z + data.v + data.w] = data.value
 })
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y recorremos el diccionario:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-javascript&#34;&gt;var keys = Object.keys(table);
for (var m = 0; m &amp;lt; keys.length; m++) {
 value = table[keys[m]];
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cabe repetir que lejos de entender la implementacion interna de los objetos en javascript, no parece que sea una tabla hash sino un array asociativo, no podemos decidir una funcion hash especifica para nuestro problema.&lt;/p&gt;

&lt;h3 id=&#34;python:5dbeb49de3f8f0ff0c87f66e0ee68be5&#34;&gt;Python&lt;/h3&gt;

&lt;p&gt;En python los &lt;a href=&#34;http://hg.python.org/cpython/file/52f68c95e025/Objects/dictobject.c&#34;&gt;diccionarios&lt;/a&gt; son tablas hash, ademas, nuestras claves no tienen por que ser tipos basicos, si lo fueran seria bastante parecido al ejemplo de javascript, excepto que son tablas hash reales,aqui esta la implementacion de tuplas como claves. Cualquier objeto puede ser una clave de un diccionario, basta con que cumpla una serie de requisitos en su definicion, debemos especificar un par de cosas:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Como sabremos que un objeto es igual a otro, para ello usaremos el metodo eq en su clase, necesitamos saberlo para decidir cuando hay una colision&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;Definiremos un metodo &lt;a href=&#34;https://docs.python.org/2/reference/datamodel.html#object.__hash__&#34;&gt;hash&lt;/a&gt; para aplicar cualquier funcion que queramos en la construccion/lectura del diccionario.&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Vamos a definir nuestra clase para las claves de busqueda:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;class Key():
    def __init__(self,x,y,z,v,w):
        self.x = int(x)
        self.y = int(y)
        self.z = int(z)
        self.v = int(v)
        self.w = int(w)

    def __str__(self):
        return str(self.x) + str(self.y) + str(self.z) + str(self.v) + str(self.w)

    def __repr__(self):
        return str(self)

    def __eq__(self,other):
        return self.x == other.x and self.y == other.y and self.z == other.z and self.v == other.v and self.w == other.w

    def __hash__(self):
        &amp;quot;&amp;quot;&amp;quot;
        En esta funcion debemos devolver un entero, sera nuestra funcion hash
        &amp;quot;&amp;quot;&amp;quot;
        return hash((req.x,req.y,req.z,req.v,req.w))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Como podemos ver, la funcion hash, nos permite contruir nuestra tabla hash con facilidad, otros ejemplos de funciones hash para este problema:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def custom(self):
  return abs(req.x * (req.y + 1) * (req.z + 1) + req.v) % 1572869

def integer(self):
  return int(str(self)) # el hash de un entero en python es el propio numero
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Favoreciendonos del lenguaje y de este metodo hash, podemos cambiar su definicion en tiempo de ejecucion, esto nos servira para comparar muchas funciones hash de manera sencilla, pero eso sera en otro post aparte.&lt;/p&gt;

&lt;p&gt;Leemos todas las claves&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def dict_scan(d):
    for key in d.keys():
        d[key]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;c:5dbeb49de3f8f0ff0c87f66e0ee68be5&#34;&gt;C&lt;/h3&gt;

&lt;p&gt;En C no existe la estructura diccionario dentro del lenguaje, lo tenemos que hacer nosotros, esto tiene como ventaja que tenemos un control absoluto de como se tiene que comportar, ademas del rendimiento insuperable que tiene un lenguaje compilado como C. No hace falta que igual de insuperable es el tiempo que nos cuesta implementar este problema comparado con los otros dos contendientes, digamos que tenemos tiempo infinito para hacerlo.&lt;/p&gt;

&lt;p&gt;La creacion de la estructura de datos la tabla hash es la siguiente:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;#include &amp;lt;sys/types.h&amp;gt;
#include &amp;lt;sys/stat.h&amp;gt;
#include &amp;lt;sys/time.h&amp;gt;
#include &amp;lt;fcntl.h&amp;gt;
#include &amp;lt;stdio.h&amp;gt;
#include &amp;lt;stdlib.h&amp;gt;
#include &amp;lt;string.h&amp;gt;
#include &amp;lt;unistd.h&amp;gt;

#define TAMHASH 1572869

typedef struct {
  int *datos;
  int num_datos;
} datos_t;

typedef struct {
  int k[5];
  int v;
} hash_datos_t;

typedef struct
{
  hash_datos_t *datos;
  int num_datos;
  int num_max_datos;
} hash_node_t;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La funcion hash es totalmente como nosotros queramos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;inline static int hash_key(int x, int y, int z, int v, int w)
{
  return (x * y * (z + 1) + v + w) % TAMHASH;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Creamos un hash vacio&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;hash_node_t *hash_create(void)
{
  hash_node_t *hash;
  int i;

  hash = malloc(sizeof(hash_node_t) * TAMHASH);
  for(i = 0; i &amp;lt; TAMHASH; i++)
  {
      hash[i].datos = malloc(sizeof(hash_datos_t) * 2);
      hash[i].num_datos = 0;
      hash[i].num_max_datos = 2;
  }

  return hash;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Lo llenamos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;inline static void hash_add(hash_node_t *hash, int *p, int valor)
{
  int ind;
  int i;

  ind = hash_key(p[0], p[1], p[2], p[3], p[4]);

  // comprobamos si existe
  for(i = 0; i &amp;lt; hash[ind].num_datos; i++)
  {
    if(hash[ind].datos[i].k[0] == p[0] &amp;amp;&amp;amp;
      hash[ind].datos[i].k[1] == p[1] &amp;amp;&amp;amp;
      hash[ind].datos[i].k[2] == p[2] &amp;amp;&amp;amp;
      hash[ind].datos[i].k[3] == p[3] &amp;amp;&amp;amp;
      hash[ind].datos[i].k[4] == p[4])
      break;
  }

  if(i == hash[ind].num_datos)
  {
    // no se ha encontrado la información
    // creamos un elemento nuevo
    if(hash[ind].num_datos == hash[ind].num_max_datos)
    {
      // si hemos llegado al máximo ampliamos
      hash[ind].num_max_datos += 4;
      hash[ind].datos = realloc(hash[ind].datos,
        sizeof(hash_datos_t) * hash[ind].num_max_datos);
    }

    //memcpy(hash[ind].datos[i].k, p, sizeof(int)*5);
    hash[ind].datos[i].k[0] = p[0];
    hash[ind].datos[i].k[1] = p[1];
    hash[ind].datos[i].k[2] = p[2];
    hash[ind].datos[i].k[3] = p[3];
    hash[ind].datos[i].k[4] = p[4];
    hash[ind].datos[i].v = valor;
    hash[ind].num_datos++;
  }
  else
  {
    // lo hemos encontrado.
    hash[ind].datos[i].v = valor;
  }
}

// Metemos cada linea en el hash con la funcion de arriba
for(linea = 0; linea &amp;lt; datos-&amp;gt;num_datos; linea+=6)
{
  hash_add(hash, &amp;amp;datos-&amp;gt;datos[linea], datos-&amp;gt;datos[linea + 5]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y lo leemos&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-c&#34;&gt;inline static int hash_get(hash_node_t *hash, int *p)
{
  int i;
  int ind;
  int ret = -1;

  ind = hash_key(p[0], p[1], p[2], p[3], p[4]);

  // comprobamos si existe
  for(i = 0; i &amp;lt; hash[ind].num_datos; i++)
  {
    if(hash[ind].datos[i].k[0] == p[0] &amp;amp;&amp;amp;
      hash[ind].datos[i].k[1] == p[1] &amp;amp;&amp;amp;
      hash[ind].datos[i].k[2] == p[2] &amp;amp;&amp;amp;
      hash[ind].datos[i].k[3] == p[3] &amp;amp;&amp;amp;
      hash[ind].datos[i].k[4] == p[4])
    {
      ret = hash[ind].datos[i].v;
      break;
    }
  }

  return ret;
}

// consultando datos
for(linea = 0; linea &amp;lt; datos-&amp;gt;num_datos; linea+=6)
{
  v = hash_get(hash, &amp;amp;datos-&amp;gt;datos[linea]);
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;metodo-de-resolucion-de-colisiones:5dbeb49de3f8f0ff0c87f66e0ee68be5&#34;&gt;Metodo de resolucion de colisiones&lt;/h3&gt;

&lt;p&gt;En el caso de C, la tabla hash esta creada con un metodo de resolucion de colisiones del tipo &lt;a href=&#34;http://en.wikipedia.org/wiki/Hash_table#Separate_chaining_with_linked_lists&#34;&gt;Separate chaining with linked lists&lt;/a&gt;, mientras que el metodo que python usa es &lt;a href=&#34;http://en.wikipedia.org/wiki/Hash_table#Open_addressing&#34;&gt;Open addressing&lt;/a&gt;, En esta grafica se ve como se comportan los dos metodos segun lo llena que esta la tabla (load factor), ordenadas menores es mejor.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;http://upload.wikimedia.org/wikipedia/commons/1/1c/Hash_table_average_insertion_time.png&#34; alt=&#34;Grafica collision compare&#34; /&gt;&lt;/p&gt;

&lt;h3 id=&#34;rendimiento:5dbeb49de3f8f0ff0c87f66e0ee68be5&#34;&gt;Rendimiento&lt;/h3&gt;

&lt;p&gt;Aunque no con este codigo (modificado para la explicacion), se hicieron pruebas de los tres lenguajes, siendo vencedor C (con toda optimizacion del codigo posible), y muy cerca quedo &lt;a href=&#34;http://pypy.org/&#34;&gt;pypy&lt;/a&gt; con su funcion built-in de hashear tuplas, mas de tres veces mas lento quedo el cpython 2.7, y javascript en nodejs.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Busquedas de texto en postgresql</title>
      <link>http://blog.fabio.xyz/post/full-text-search-postgresql/</link>
      <pubDate>Sun, 30 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.fabio.xyz/post/full-text-search-postgresql/</guid>
      <description>

&lt;h1 id=&#34;buscando-texto-con-postgresql:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Buscando texto con postgresql&lt;/h1&gt;

&lt;p&gt;Tengo una aplicacion que usa postgresql y quiero buscar texto en ella, pero pongo &lt;em&gt;camion&lt;/em&gt; sin acento y no me sale &amp;ldquo;camión&amp;rdquo;, bastante tipico no?. Postgresql puede buscar entre texto como a nosotros nos gustaria, vamos a probar las funcionalidades de &lt;a href=&#34;http://www.postgresql.org/docs/9.3/static/textsearch.html&#34;&gt;full text search&lt;/a&gt; que nos ofrece. Os adelanto que este es un ejemplo sencillisimo de todo lo que soporta.&lt;/p&gt;

&lt;h2 id=&#34;tengo-una-columna-con-texto-donde-quiero-buscar:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Tengo una columna con texto donde quiero buscar&lt;/h2&gt;

&lt;p&gt;El caso de uso mas común, tengo una tabla con texto, y al buscar puedo usar LIKE o incluso ILIKE, pero eso no nos hace encontrar las palabras como un humano quiere realmente, no vamos a lograr hacer el &lt;em&gt;quiso decir&lt;/em&gt; de google, pero al menos vamos a poder buscar entre texto con o sin acentos, mayusculas, nexos y cosas asi que nos molestan.&lt;/p&gt;

&lt;p&gt;Vamos a crear una base de datos y una tabla de prueba:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE DATABASE tss;
CREATE TABLE textos (
     texto   text
);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora insertamos texto de ejemplo:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;INSERT INTO textos VALUES (&#39;En un lugar de la Mancha&#39;);
INSERT INTO textos VALUES (&#39;de cuyo nombre no quiero acordarme,&#39;);
INSERT INTO textos VALUES (&#39;no ha mucho que vivía&#39;);
INSERT INTO textos VALUES (&#39;un hidalgo de los de lanza en astillero&#39;);
INSERT INTO textos VALUES (&#39;adarga antigua&#39;);
INSERT INTO textos VALUES (&#39;rocín flaco y galgo corredor.&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podemos buscar texto de manera precaria:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ts=# select * from textos where texto like &#39;mancha&#39;;
 texto
-------
(0 filas)

ts=# select * from textos where texto like &#39;%mancha%&#39;;
 texto
-------
(0 filas)

ts=# select * from textos where texto ilike &#39;%mancha%&#39;;
          texto           
--------------------------
 En un lugar de la Mancha
(1 fila)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pero pronto veremos que esto no es manera, y si el usuario mete dos palabras , y si quiere buscar &lt;em&gt;rocín&lt;/em&gt; sin acento? Vamos a hacerlo bien.&lt;/p&gt;

&lt;h2 id=&#34;full-text-search-en-nuestra-columna:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Full-text search en nuestra columna&lt;/h2&gt;

&lt;p&gt;Para empezar nuestros strings deben cambiar a otro tipo llamado tsvector, que postgresql usuara para buscar de una manera eficaz, vamos nuestros strings como tsvectors:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ts=# select to_tsvector(texto) from textos ;
               to_tsvector                
------------------------------------------
 &#39;lug&#39;:3 &#39;manch&#39;:6
 &#39;acord&#39;:6 &#39;cuy&#39;:2 &#39;nombr&#39;:3 &#39;quier&#39;:5
 &#39;viv&#39;:5
 &#39;astiller&#39;:8 &#39;hidalg&#39;:2 &#39;lanz&#39;:6
 &#39;adarg&#39;:1 &#39;antigu&#39;:2
 &#39;corredor&#39;:5 &#39;flac&#39;:2 &#39;galg&#39;:4 &#39;rocin&#39;:1
(6 filas)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Muy raro todo no?, &lt;strong&gt;En un lugar de la Mancha&lt;/strong&gt; se ha convertido en &lt;strong&gt;&amp;lsquo;lug&amp;rsquo;:3 &amp;lsquo;manch&amp;rsquo;:6&lt;/strong&gt; . Un tsvector es una lista de lexemas, digamos de palabras que pueden derivar en nuestra palabra real u otras parecidas, Hemos &lt;strong&gt;normalizado&lt;/strong&gt; nuestras palabras, es decir, las hemos puesto en minusculas, quitado los plurales, etc. Los numeros asociados, es la posicion de estas palabras en nuestro string original, En un &lt;strong&gt;lug&lt;/strong&gt;(3) de la &lt;strong&gt;manch&lt;/strong&gt;(6)&lt;/p&gt;

&lt;p&gt;TODO Poner en que lenguaje esta el postgresql&lt;/p&gt;

&lt;h2 id=&#34;pasarle-una-busqueda:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Pasarle una busqueda&lt;/h2&gt;

&lt;p&gt;Ahora que tenemos nuestros textos &lt;em&gt;arreglados&lt;/em&gt; para las busquedas, podemos meter un string en la caja de busqueda, podemos meter cualquier cosa, y queremos que nos salgan los resultados razonables, para ello nuestra busqueda debemos arreglarla tambien, para ello usaremos el tipo tsquery. Este tipo, esta pensado para operar contra tsvectors como los que hemos creado antes, un ejemplo es:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ts=# select to_tsquery(&#39;vivir&#39;);
 to_tsquery
------------
 &#39;viv&#39;
(1 fila)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;sacando-resultados:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Sacando resultados&lt;/h2&gt;

&lt;p&gt;Para buscar en nuestra tabla debemos hacer un select normal, excepto que en nuestro where usaremos el operador @@ (uno de los &lt;a href=&#34;http://www.postgresql.org/docs/9.3/static/functions-textsearch.html&#34;&gt;muchos&lt;/a&gt; que hay disponibles) entre nuestra tabla pasada a tsvector y nuestra busqueda pasada a tsquery&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ts=# select * from textos where to_tsvector(texto) @@ to_tsquery(&#39;vivir&#39;);
         texto         
-----------------------
 no ha mucho que vivía
(1 fila)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ranking:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Ranking&lt;/h2&gt;

&lt;p&gt;Un motor de busqueda bueno, nos ordenara los resultados por relevancia, segun nos acerquemos mas a lo que queremos buscar. Postgresql tambien nos ofrece &lt;a href=&#34;http://www.postgresql.org/docs/9.3/static/textsearch-controls.html#TEXTSEARCH-RANKING&#34;&gt;esta funcionalidad&lt;/a&gt;, por ejemplo, si tenemos un blog, queremos que al buscar , el titulo tengas mas relevancia que el contenido, vamos a verlo:&lt;/p&gt;

&lt;p&gt;Creamos una tabla con datos:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE TABLE blog(
	titulo varchar(200),
	contenido text
);
INSERT INTO blog VALUES (&#39;Molan las busquedas en postgresql&#39;,&#39;Estoy escribiendo un contenido del post sin la palabra maldita&#39;);
INSERT INTO blog VALUES (&#39;Molan las busquedas en nuestra db&#39;,&#39;Estoy escribiendo un contenido del post que usa postgresql para buscar&#39;);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Para buscar creamos un tsvector de nuestros dos campos asi, en el ejemplo un post tiene la palabra &lt;em&gt;postgresql&lt;/em&gt; en el titulo, y otro post la tiene en el contenido.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ts=# select to_tsvector(titulo) || to_tsvector(contenido) from blog;
                                            ?column?                                            
------------------------------------------------------------------------------------------------
 &#39;busqued&#39;:3 &#39;conten&#39;:9 &#39;escrib&#39;:7 &#39;maldit&#39;:15 &#39;mol&#39;:1 &#39;palabr&#39;:14 &#39;post&#39;:11 &#39;postgresql&#39;:5
 &#39;busc&#39;:17 &#39;busqued&#39;:3 &#39;conten&#39;:10 &#39;db&#39;:6 &#39;escrib&#39;:8 &#39;mol&#39;:1 &#39;post&#39;:12 &#39;postgresql&#39;:15 &#39;usa&#39;:14
(2 filas)

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Con la funcion &lt;strong&gt;setweight&lt;/strong&gt; podemos decir que relevancia tiene un tsvector, hay pesos desde la &amp;rsquo;D&amp;rsquo; hasta la &amp;lsquo;A&amp;rsquo;, modificamos la consulta para ponerle mas peso al titulo que al contenido:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ts=# select setweight(to_tsvector(titulo),&#39;A&#39;) || setweight(to_tsvector(contenido),&#39;B&#39;) from blog;
                                                ?column?                                                 
---------------------------------------------------------------------------------------------------------
 &#39;busqued&#39;:3A &#39;conten&#39;:9B &#39;escrib&#39;:7B &#39;maldit&#39;:15B &#39;mol&#39;:1A &#39;palabr&#39;:14B &#39;post&#39;:11B &#39;postgresql&#39;:5A
 &#39;busc&#39;:17B &#39;busqued&#39;:3A &#39;conten&#39;:10B &#39;db&#39;:6A &#39;escrib&#39;:8B &#39;mol&#39;:1A &#39;post&#39;:12B &#39;postgresql&#39;:15B &#39;usa&#39;:14B
(2 filas)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ahora vemos como a los numeros de los lexemas, les ha agregado la relevancia. Ahora vamos a buscar y a ordenar los resultados, para nuestro ORDER BY usaremos la funcion ts_rank.&lt;/p&gt;

&lt;p&gt;Nos importa mas el titulo:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ts=# select * from blog
where to_tsvector(titulo)||to_tsvector(contenido) @@ to_tsquery(&#39;postgresql&#39;)
order by ts_rank(setweight(to_tsvector(titulo),&#39;D&#39;) || setweight(to_tsvector(contenido),&#39;A&#39;),to_tsquery(&#39;postgresql&#39;));
              titulo               |                               contenido                                
-----------------------------------+------------------------------------------------------------------------
 Molan las busquedas en postgresql | Estoy escribiendo un contenido del post sin la palabra maldita
 Molan las busquedas en nuestra db | Estoy escribiendo un contenido del post que usa postgresql para buscar
(2 filas)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Nos importa mas el contenido:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ts=# select * from blog
where to_tsvector(titulo)||to_tsvector(contenido) @@ to_tsquery(&#39;postgresql&#39;)
order by ts_rank(setweight(to_tsvector(titulo),&#39;A&#39;) || setweight(to_tsvector(contenido),&#39;D&#39;),to_tsquery(&#39;postgresql&#39;));
              titulo               |                               contenido                                
-----------------------------------+------------------------------------------------------------------------
 Molan las busquedas en nuestra db | Estoy escribiendo un contenido del post que usa postgresql para buscar
 Molan las busquedas en postgresql | Estoy escribiendo un contenido del post sin la palabra maldita
(2 filas)
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;usando-indices:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Usando indices&lt;/h2&gt;

&lt;p&gt;Vaya turron de consultas las dos ultimas no?, ademas de enfarragoso, algo ineficiente, como en postgresql se pueden definir indices sobre funciones , podemos pasar lo anterior a un indice &lt;a href=&#34;http://www.postgresql.org/docs/9.3/static/textsearch-indexes.html&#34;&gt;gin&lt;/a&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE INDEX blog_posts_idx ON blog
USING gin(( setweight(to_tsvector(&#39;spanish&#39;,titulo),&#39;B&#39;) || setweight(to_tsvector(&#39;spanish&#39;,contenido),&#39;A&#39;)) );
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Hemos creado un indice con la misma funcionalidad que en el anterior ejemplo, esta vez, hemos especificado a tsvector que nuestro idioma del post es español, (podriamos especificar distintos idiomas tambien). Asi nos creara el texto normalizado para nuestro idioma de manera correcta. (and o with en español no lo eliminara, seran palabras &lt;em&gt;importantes&lt;/em&gt; en español).&lt;/p&gt;

&lt;h2 id=&#34;mispelling:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Mispelling&lt;/h2&gt;

&lt;p&gt;Queria buscar Quijote pero he puesto &amp;ldquo;qijote&amp;rdquo;, deberia salir igual no? Para esto, tenemos &lt;a href=&#34;http://www.postgresql.org/docs/9.3/static/pgtrgm.html&#34;&gt;una extension&lt;/a&gt; que podemos ponerla en nuestra db asi:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;CREATE EXTENSION pg_trgm;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Esta extension nos da una funcion que nos da un float entre 0 y 1 llamada similarity:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-sql&#34;&gt;ts=# select similarity(&#39;Quijote&#39;, &#39;Quijote&#39;);
 similarity
------------
          1
(1 fila)

ts=# select similarity(&#39;Quijote&#39;, &#39;Quijota&#39;);
 similarity
------------
        0.6
(1 fila)

ts=# select similarity(&#39;Quijote&#39;, &#39;nada que ver&#39;);
 similarity
------------
   0.105263
(1 fila)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Gracias a esta funcion, podremos buscar entre lexemas de nuestra tabla parecidos, pero eso sera en otro post.&lt;/p&gt;

&lt;h3 id=&#34;fuentes:29d8985df3111b68738be647d0a2bf6d&#34;&gt;Fuentes&lt;/h3&gt;

&lt;p&gt;Me he inspirado, si no a veces copiado de este fantastico &lt;a href=&#34;http://blog.lostpropertyhq.com/postgres-full-text-search-is-good-enough/&#34;&gt;post&lt;/a&gt; acerca de este tema&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>El problema de las tres puertas</title>
      <link>http://blog.fabio.xyz/post/montyhall/</link>
      <pubDate>Sun, 09 Nov 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.fabio.xyz/post/montyhall/</guid>
      <description>&lt;p&gt;Vamos a hacer una simulacion para averiguar un problema famoso de probabilidad, el &lt;strong&gt;problema de las tres puertas&lt;/strong&gt;, o de &lt;strong&gt;monty hall&lt;/strong&gt;. Este problema siempre resulta controvertido, o al menos divertido, ya que esconde una serie de eventos con cierta probabilidad que &lt;strong&gt;no son independientes&lt;/strong&gt; pero lo parecen.&lt;/p&gt;

&lt;p&gt;El enunciado es el siguiente:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Supón que estás en un concurso, y se te ofrece escoger entre tres puertas: detrás de una de ellas hay un coche, y detrás de las otras, cabras. Escoges una puerta, digamos la nº1, y el presentador, que sabe lo que hay detrás de las puertas, abre otra, digamos la nº3, que contiene una cabra. Entonces te pregunta: &amp;ldquo;¿No prefieres escoger la nº2?&amp;rdquo;. ¿Es mejor para ti cambiar tu elección?&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Puedes ver el &lt;a href=&#34;http://es.wikipedia.org/wiki/Problema_de_Monty_Hall&#34;&gt;resultado teorico&lt;/a&gt; desde ya, pero aqui vamos a simularlo muchas veces a ver si es mejor quedarme con la puerta que elegí, o gano mas veces cambiando la puerta. Es un buen ejemplo como en unas pocas lineas de codigo, podemos simular un problema complejo para inferir la probabilidad de un evento. Solo basta con modelar el problema, hacerlo muchas veces y ver que pasa para hacerte una idea.&lt;/p&gt;

&lt;p&gt;Esta funcion repite un numero &lt;code&gt;numTrials&lt;/code&gt; de veces el concurso, almacena los 3 posibles resultados:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;stickWins&lt;/code&gt; Numero de veces que ganamos quedandonos con la puerta que elegimos la primera vez&lt;/li&gt;
&lt;li&gt;&lt;code&gt;switchWins&lt;/code&gt; Numero de veces que ganamos cambiando a la otra puerta que queda disponible&lt;/li&gt;
&lt;li&gt;&lt;code&gt;noWin&lt;/code&gt; Numero de veces que no ganamos&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Despues en cada experimento, colocaremos el premio en una de las tres puertas aleatoriamente, y elegiremos una puerta tambien aleatoriamente,&lt;/p&gt;

&lt;p&gt;Usaremos una funcion para decidir que puerta abre monty, la hemos llamado &lt;code&gt;chooseFcn&lt;/code&gt; y se la pasaremos por parametro, asi podemos hacer un monty mas flexible.&lt;/p&gt;

&lt;p&gt;Contabilizamos el resultado del experimento:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Si monty abre la puerta con el premio has perdido (esto no pasa nunca en el problema original, puesto que en el concurso monty &lt;strong&gt;sabia&lt;/strong&gt; donde estaba el premio y abria la otra puerta sin el)&lt;/li&gt;
&lt;li&gt;Si la puerta que elegimos es la del premio, hemos ganado sin cambiarnos&lt;/li&gt;
&lt;li&gt;Si monty no ha abierto la del premio, y no es la que elegimos previamente, significa que hemos cambiado y ganado.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Aqui esta el experimento entero:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def simMontyHall(numTrials,chooseFcn):
    stickWins, switchWins, noWin = (0, 0, 0)
    prizeDoorChoices = [1,2,3]
    guessChoices = [1,2,3]
    for t in range(numTrials):
        prizeDoor = random.choice([1, 2, 3])
        guess = random.choice([1, 2, 3])
        toOpen = chooseFcn(guess, prizeDoor)
        if toOpen == prizeDoor:
            noWin += 1
        elif guess == prizeDoor:
            stickWins += 1
        else:
            switchWins += 1
    return (stickWins, switchWins)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;La funcion que determina el comportamiento de monty es la siguiente:&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Si no he elegido la 1 ni tiene el premio, me da la 1&lt;/li&gt;
&lt;li&gt;Lo mismo para la 2&lt;/li&gt;
&lt;li&gt;Lo mismo para la 3&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;En general devuelve &lt;em&gt;la puerta que no tiene premio y no es la mia&lt;/em&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def montyChoose(guessDoor, prizeDoor):
    if 1 != guessDoor and 1 != prizeDoor:
        return 1
    if 2 != guessDoor and 2 != prizeDoor:
        return 2
    return 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ya solo nos falta ejecutar el experimento muchas veces y ver los resultados, ganare mas veces plantandome, ganare mas veces aceptando la opcion de monty de cambiar de puerta? dara igual?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{filename}/images/montyhall1.png&#34; alt=&#34;Resultados cuando monty elige una puerta adrede&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Queda claro que si te cambias tienes mas posibilidades de ganar. Pero que pasaria si monty abre una puerta &lt;strong&gt;sin conocer&lt;/strong&gt; lo que hay detras, es decir aleatoriamente? En ese caso podria abrir la que tiene el premio y tu, perder automaticamente. Veamos la funcion que lo implementa, es muy sencilla:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;def randomChoose(guessDoor, prizeDoor):
    if guessDoor == 1:
        return random.choice([2,3])
    if guessDoor == 2:
        return random.choice([1,3])
    return random.choice([1,2])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Simplemente abre aleatoriamente una de las otras dos puertas que no elegi. Ganare mas veces plantandome, ganare mas veces aceptando la opcion de monty de cambiar de puerta? dara igual?&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;{filename}/images/montyhall2.png&#34; alt=&#34;Resultados cuando monty elige una puerta aleatoriamente&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Protractor en legacy code</title>
      <link>http://blog.fabio.xyz/post/karma-y-jasmine-en-legacy-code/</link>
      <pubDate>Thu, 30 Oct 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.fabio.xyz/post/karma-y-jasmine-en-legacy-code/</guid>
      <description>

&lt;h1 id=&#34;haciendo-tests-e2e-en-apps-que-ya-tenemos-hechas:9c6d68586ab26dacc0b2f61e2f3134ef&#34;&gt;Haciendo tests e2e en apps que ya tenemos hechas&lt;/h1&gt;

&lt;h2 id=&#34;introduccion:9c6d68586ab26dacc0b2f61e2f3134ef&#34;&gt;Introduccion&lt;/h2&gt;

&lt;p&gt;Digamos que entras en un proyecto donde existe una aplicacion con varios años en produccion, que usa como unicas librerias require y jQuery, todo lo demas esta hecho a mano, ademas como puedes suponer, no tiene ni un solo test.&lt;/p&gt;

&lt;p&gt;Nos proponemos hacer tests sobre el codigo existente y asi implantarlos para futuras features.&lt;/p&gt;

&lt;h2 id=&#34;webdriverjs-selenium:9c6d68586ab26dacc0b2f61e2f3134ef&#34;&gt;WebdriverJs (Selenium)&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.seleniumhq.org/projects/webdriver/&#34;&gt;Selenium&lt;/a&gt; es un driver que automatiza interacciones con el explorador&lt;/p&gt;

&lt;p&gt;Lo instalaremos y ejecutaremos como un paquete de nodejs, de esta manera&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo npm install -g webdriver-manager
$ sudo webdriber-manager update
$ sudo webdriber-manager start
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;protractor:9c6d68586ab26dacc0b2f61e2f3134ef&#34;&gt;Protractor&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.npmjs.org/package/protractor&#34;&gt;Protractor&lt;/a&gt; es un sistemas para ejecutar test e2e de aplicaciones angularjs, es decir, abre un explorador, (o no), y hace cliks, rellena campos y lo que haria el usuario de manera automatica. Como wrapper de selenium para angularjs, diremos que tambien se puede usar para aplicaciones no-angularjs&lt;/p&gt;

&lt;p&gt;Lo instalamos en el sistema:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo npm install -g protractor
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y despues creamos un fichero de configuracion, como no tenemos angular hay que configurarlo con un par de cosillas&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Diremos donde estan nuestros ficheros con tests de Jasmine en la variable specs&lt;/li&gt;
&lt;li&gt;Y despues le diremos nuestros delays en la aplicacion, y que se olvide de la sincronizacion que hace con una app angular&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;exports.config = {
  seleniumAddress: &#39;http://localhost:4444/wd/hub&#39;,
  specs: [&#39;spec.js&#39;],

  onPrepare: function() {
    // implicit and page load timeouts
    browser.manage().timeouts().pageLoadTimeout(20000);
    browser.manage().timeouts().implicitlyWait(10000);

    // for non-angular page
    browser.ignoreSynchronization = true;

    // Maximized chrome window
    browser.driver.manage().window().maximize();
  }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;un-test-sencillo:9c6d68586ab26dacc0b2f61e2f3134ef&#34;&gt;Un test sencillo&lt;/h2&gt;

&lt;p&gt;Ahora crearemos un test sencillo, sacado el tutorial de protractor (muy util), en nuestro fichero specs.js:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-js&#34;&gt;describe(&#39;angularjs homepage&#39;, function() {
  it(&#39;should have a title&#39;, function() {
    browser.get(&#39;http://juliemr.github.io/protractor-demo/&#39;);

    expect(browser.getTitle()).toEqual(&#39;Super Calculator&#39;);
  });
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Y ejecutamos protractor:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ protractor conf.js
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;chrome-y-phantomjs:9c6d68586ab26dacc0b2f61e2f3134ef&#34;&gt;Chrome y PhantomJS&lt;/h2&gt;

&lt;p&gt;Hasta ahora estamos viendo nuestra ventana de chrome pasando los tests, pero si quisieramos pasarlos en un servidor de integracion continua, deberiamos usar un explorador headless, ya que es posible que este servidor no tenga servidor grafico para GUIs.&lt;/p&gt;

&lt;p&gt;Para eso usaremos phantomjs, como en los anteriores paquetes:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;$ sudo npm install -g phantomjs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Cambiaremos nuestro conf.js para que use phantomjs y ya lo tendremos headless.&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Haciendo la vida facil al psql</title>
      <link>http://blog.fabio.xyz/post/Mejorando%20el%20.psqlrc/</link>
      <pubDate>Sun, 15 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://blog.fabio.xyz/post/Mejorando%20el%20.psqlrc/</guid>
      <description>

&lt;ul&gt;
&lt;li&gt;Hace ya un tiempo que estoy usando &lt;a href=&#34;https://github.com/dbcli/pgcli&#34;&gt;pgcli&lt;/a&gt;, mejora bastante el uso con autocompletado y mas cosas&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;psql:b21b9f9b765dbd38172d3d406f70266d&#34;&gt;psql&lt;/h2&gt;

&lt;p&gt;Para los que usamos el cliente psql, hay ciertas &amp;ldquo;mejoras&amp;rdquo; o customizaciones que me gustaria compartir, todas (como muchas otras) se escriben en el fichero ~/.psqlrc, puedes descargar el &lt;a href=&#34;https://raw.githubusercontent.com/avances123/dotfiles/master/postgresql/psqlrc&#34;&gt;mio&lt;/a&gt; si quieres!&lt;/p&gt;

&lt;h3 id=&#34;distintos-historicos:b21b9f9b765dbd38172d3d406f70266d&#34;&gt;Distintos historicos&lt;/h3&gt;

&lt;p&gt;Al igual que el bash_history, guardaremos un historial de los comandos en un fichero, pero por defecto los guardamos en ~/.psql_history, con esta linea los separaremos por base de datos. Asi tendremos un ~/.psql_history-mydb1,~/.psql_history-mydb2 y no se mezclaran entre varias bases de datos.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\set HISTFILE ~/.psql_history- :DBNAME
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;aumentar-las-lineas-de-historico:b21b9f9b765dbd38172d3d406f70266d&#34;&gt;Aumentar las lineas de historico&lt;/h4&gt;

&lt;p&gt;Almacenamos mas queries que por defecto&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\set HISTSIZE 20000
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;mejoramos-el-prompt:b21b9f9b765dbd38172d3d406f70266d&#34;&gt;Mejoramos el prompt&lt;/h4&gt;

&lt;p&gt;En la linea de comandos podremos ver a que base de datos y host estamos conectados:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\set PROMPT1 &#39;%M %n@%/%R%#%x &#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El resultado es:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[local] fabio@tests=#
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;coloreamos-el-null:b21b9f9b765dbd38172d3d406f70266d&#34;&gt;Coloreamos el null&lt;/h4&gt;

&lt;p&gt;Cuando usamos pgsl, los nulos salen como una cadena vacia y no vemos nada, podremos reemplazar el null por cualquier valor que queramos:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\pset null &#39;[NULL]&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El resultado es:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[local] fabio@tests=# insert into foo values (1,null) ;
INSERT 0 1
[local] fabio@tests=# select * from foo;
 id |  bar   
----+--------
  1 | [NULL]
(1 fila)

&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;demasiadas-columnas-para-mi-consola:b21b9f9b765dbd38172d3d406f70266d&#34;&gt;Demasiadas columnas para mi consola&lt;/h4&gt;

&lt;p&gt;Si queremos que psql nos cambie a formato extendido automaticamente cuando haya demasiadas columnas pondremos esto:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\x auto
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;confirmar-la-salida:b21b9f9b765dbd38172d3d406f70266d&#34;&gt;Confirmar la salida&lt;/h4&gt;

&lt;p&gt;Si hemos creado tablas temporales o cosas propias de nuestra sesion, no queremos salirnos por error, para ello tendremos que pulsar ctrl+D 3 veces en lugar de una.&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;\set IGNOREEOF 3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;El resultado es este:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-bash&#34;&gt;[local] fabio@tests=# Use «\q» para salir de psql.
[local] fabio@tests=# Use «\q» para salir de psql.
[local] fabio@tests=# \q
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>